# spyder 단축키
# - F9 : 라인단위 실행
# - ctrl + 1   : 라인/선택영역 일반 주석/해제
# - ctrl + 4,5 : 라인/선택영역 구분 주석/해제

# 모듈(module)
# - R의 패키지와 같은 개념(함수의 묶음)
# - import 명령어로 모듈 호출 후 함수 사용
# - R과는 다르게 내장 모듈(함수)도 호출 후 사용

# 모듈 호출 방법
# 1) import 모듈명
# 모듈명.함수명

import math
math.trunc(1.98)

# 2) import 모듈명 as 별칭
# 별칭명.함수명

import numpy as np
np.array([1,2,3])

# 3) from 모듈명 import 함수명
# 함수명

import pandas as pd
pd.DataFrame({'a1':[1,2,3]})

from pandas import DataFrame
DataFrame({'a1':[1,2,3]})

from math import * 

# print 및 출력 형식
# 1) 출력 형식
# - %d : 정수 출력 포맷
# - %s : 문자열 출력 포맷
# - %f : 실수 출력 포맷

# 2) 기본 출력
print('abcd')

# 3) % 포맷 전달 방식
print('%d' % 1)
print('%d + %d = %d' % (1,2,1+2))                   # 1+2=3
print('%d 더하기 %d 는 %d 입니다.' % (1,2,1+2))
print('%.2f 더하기 %.2f 는 %.2f 입니다.' % (1,2,1+2))

print('%5d' % 1)    # "    1"
print('%05d' % 1)   # "00001"

# 4) .format 포맷 전달 방식(위치 전달 가능)
print("{0:d}".format(100))
print("{0:d} + {2:d} = {1:d}".format(100,300,200))     # 100 + 200 = 300

# 5) 특수기호 전달
print('\')     # \ 출력, 에러 발생
print('\\')    # \ 출력, 정상 출력
print('\'')    # ' 출력
print('a\nb\nc')


# [ 참고 - 변수 및 상수의 포맷 변경 ]
a1 = '%.2f' % 1



# 산술 연산
# - 사칙연산자 가능
# - // : 몫
# - % : 나머지

9//2   # 4(몫)
9%2    # 1(나머지)
2^4    # R에서의 지수 표현식
2**4   # 파이썬에서의 지수 표현식

# 형 확인 및 변환
# - int   : 정수 변환 
# - float : 실수 변환
# - str : 문자열 변환

1 + '1'       # 묵시적 형 변환 발생 X, 수행 에러
1 + int('1')  # 형 변환 후 정상 수행

a1 = 1.45
a2 = '2'

type(a1)
type(a2)


# input : 사용자가 입력한 값 문자형으로 가져오기
v1 = int(input('값을 입력하세요 : '))
v1 + 1
type(v1)


# [ 연습 문제 ]
# 두 수를 입력 받아 아래와 같은 형식으로 출력
# 9를 4로 나눈 몫은 2 입니다.
# 9를 4로 나눈 나머지는 1 입니다.

v1 = int(input('첫번째 수를 입력하세요 : '))
v2 = int(input('두번째 수를 입력하세요 : '))

print('%d를 %d로 나눈 몫은 %d 입니다.' % (v1,v2,v1//v2))
print('%d를 %d로 나눈 나머지는 %d 입니다.' % (v1,v2,v1%v2))

print('{0:d}를 {1:d}로 나눈 몫은 {2:d} 입니다.'.format(v1,v2,v1//v2))
print('{0:d}를 {1:d}로 나눈 나머지는 {2:d} 입니다.'.format(v1,v2,v1%v2))


# 파이썬 자료 구조
# 1. 리스트
# - 기본 자료 구조
# - R의 벡터와 비슷
# - 1차원 
# - 서로 다른 데이터 타입 허용

# 2. 딕셔너리
# - 기본 자료 구조
# - R의 리스트와 비슷
# - key와 value 형태로 구성
# - key별 서로 다른 데이터 타입 허용

# 3. 배열
# - numpy 모듈 지원 자료 구조
# - R의 배열과 동일
# - 다차원
# - 하나의 데이터 타입만 허용

# 4. 시리즈
# - pandas 모듈 지원 자료 구조
# - R에서의 데이터프레임과 동일
# - 1차원
# - 하나의 데이터 타입만 허용
# - 데이터프레임의 컬럼을 구성하는 기본 자료 구조

# 5. 데이터 프레임
# - pandas 모듈 지원 자료 구조
# - R에서의 데이터프레임과 동일
# - 행과 열의 구조(key-value)
# - 2차원



# 리스트 : 파이썬 기본 자료 구조, 1차원, 서로 다른 데이터 타입 허용
# 1. 생성
l1 = [1,2,3]
l2 = [1,2,3,'4']

df1[c(1,3) , ]
df1[[1,3] , ]

# 2. 색인
l1[0]
l1[[0,2]]   # 리스트를 사용한 색인 불가
l1[1:2]     # 두번째에서 두번째 원소 추출, 슬라이스 색인은 차원 축소 방지
l1[1]       # 정수 색인은 하나 추출 시 차원 축소
l1[0:2]     # 첫번째에서 두번째 원소 추출
l1[-1]      # 뒤에서 첫번째 원소 추출

# n:m => n ~ (m-1) 까지 추출

# [ 참고 - 시리즈에서의 리스트 색인 ]
from pandas import Series
s1 = Series(l1)
s1[[0,2]]   # 리스트를 사용한 색인 가능
    
    
    


